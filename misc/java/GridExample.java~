import java.util.*;



class Node {
	int x,y;
    Node(int x,int y) { this.x=x; this.y=y;} 

}

public class GridExample {

public static void main ( String[] args)
{

}

int doFill(int x, int y) {
    int result = 0;

    // Declare our stack of nodes, and push our starting node onto the stack
    Stack s = new Stack();
    s.push(new Node(x, y));

    while (s.isEmpty() == false) {
	Node top = (Node) s.peek();
	s.pop();

	// Check to ensure that we are within the bounds of the grid, if not, continue
	if (top.x < 0 || top.x >= 600) continue;
	// Similar check for y
	if (top.y < 0 || top.y >= 400) continue;
	// Check that we haven't already visited this position, as we don't want to count it twice
	if (fill[top.x][top.y]) continue;

	fill[top.x][top.y] = true; // Record that we have visited this node

	// We have found this node to be empty, and part
	// of this connected area, so add 1 to the result
	result++;

	// Now we know that we have at least one empty square, then we will attempt to
	// visit every node adjacent to this node.
	s.push(new Node(top.x + 1, top.y));
	s.push(new Node(top.x - 1, top.y));
	s.push(new Node(top.x, top.y + 1));
	s.push(new Node(top.x, top.y - 1));
    }

    return result;
}

}
