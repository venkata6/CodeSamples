package blah

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import javax.annotation.PreDestroy;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.*;

@Service
public class TaskExecutorService<T> {

    private static final Logger LOGGER = LogManager.getLogger(TaskExecutorService.class);

    private DynaConf dynaConf;
    public final ThreadPoolExecutor executors ;

    public TaskExecutorService(@Autowired DynaConf dynaConf) {
        this.dynaConf = dynaConf ;
        int poolSize = dynaConf.getInt("async.task.thread.pool.size",10);
        executors = (ThreadPoolExecutor) Executors.newFixedThreadPool(poolSize);
    }


    @Scheduled(cron="0 0/5 * ? * *") // run every 5 minutes
    public void logTaskQueueSize(){
        LOGGER.info("Queue Size : "+executors.getQueue().size()+" Active Count: "+executors.getActiveCount());
    }


    public void submitTask(Runnable task, String name) {
        LOGGER.debug("Task submitted "+ name );
        executors.execute(task);
    }

    public void submitTask(Callable<T> task, String name, boolean waitTillAllComplete) {
        submitTasks(Arrays.asList(task),name,waitTillAllComplete);
    }

    public void submitTasks(Collection<Callable<T>> tasks, String name, boolean waitTillAllComplete ) {

        LOGGER.debug("Task submitted "+ name );

        if(waitTillAllComplete){

            try {
                List<Future<T>> answers = executors.invokeAll(tasks) ;

                for(Future<T> f : answers){
                    try {
                        LOGGER.info(name+" : task for "+ f.get() + " is completed ? - "+ f.isDone());
                    } catch (ExecutionException e) {
                        LOGGER.error("An error occurred when checking status of a task",e);
                    }
                }
            } catch (InterruptedException e) {
                LOGGER.error("An error occurred when executing tasks submitted for "+name,e);
            }

        }else{

            tasks.forEach(task -> {
                executors.submit(task);
            });

        }


    }

    @PreDestroy
    public void shutDown(){
        executors.shutdown();
        try {
            if (!executors.awaitTermination(dynaConf.getInt("async.task.executors.shutdown",1000), TimeUnit.MILLISECONDS)) {
                executors.shutdownNow();
            }
        } catch (InterruptedException e) {
            executors.shutdownNow();
        }
    }

}
